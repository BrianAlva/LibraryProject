DROP TABLE IF EXISTS posts;
DROP TABLE IF EXISTS Patron;
DROP TABLE IF EXISTS Item;
DROP TABLE IF EXISTS Author;
DROP TABLE IF EXISTS ItemAuthor;
DROP TABLE IF EXISTS checkoutTransaction;
DROP TABLE IF EXISTS checkoutTransactionItem;

CREATE TABLE posts (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    created TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    title TEXT NOT NULL,
    content TEXT NOT NULL
);

CREATE TABLE Patron (
	patronID SMALLINT UNSIGNED NOT NULL AUTO_INCREMENT,
	patronLastName VARCHAR(45) NOT NULL,
	patronFirstName VARCHAR(45) NOT NULL,
	patronAddress VARCHAR(90) NOT NULL,
	patronDateOfBirth DATETIME DEFAULT NOW(),
	patronLastRenewed DATETIME DEFAULT NOW() ON UPDATE NOW(),
	patronContactPhone BIGINT UNSIGNED NOT NULL,
	paymentBalence DECIMAL(13,2) NOT NULL DEFAULT 0.00,
	PRIMARY KEY (patronID)
);

CREATE TABLE Item (
	itemISBN VARCHAR(17) NOT NULL,
	itemID SMALLINT UNSIGNED NOT NULL AUTO_INCREMENT,
	itemTitle VARCHAR(90) NOT NULL,
	itemType VARCHAR(45) NOT NULL,
	itemYearPublished DATETIME DEFAULT NOW(),
	itemPublisher DATETIME DEFAULT NOW(),
	itemLoC VARCHAR(16) NOT NULL,
	itemCost DECIMAL(13,2) NOT NULL DEFAULT 0.00,
	itemAquisitionDate DATETIME DEFAULT NOW(),
	itemCopy INT NOT NULL,
	itemBranch VARCHAR(16) NOT NULL,
	itemCheckOut VARCHAR(16) NOT NULL,
	itemSecurityDeviceFlag VARCHAR(16),
	itemDamage VARCHAR(16) NOT NULL,
	PRIMARY KEY (itemISBN, itemID),
	CONSTRAINT chkItemType CHECK (itemType IN ('books', 'periodicals', 'recordings', 'videos'))
);

DELIMITER //
CREATE TRIGGER UpdateCopyOnInsert
BEFORE INSERT ON Items
FOR EACH ROW
BEGIN
	SET NEW.itemCopy = (
		SELECT COALESCE(MAX(Copy), 0) + 1
		FROM Items
		WHERE itemISBN = NEW.itemISBN
	);
END;
//
DELIMITER;

CREATE TABLE Author (
	authorID SMALLINT UNSIGNED NOT NULL AUTO_INCREMENT,
	authorLastName VARCHAR(45) NOT NULL,
	authorFirstName VARCHAR(45) NOT NULL,
	PRIMARY KEY (authorID)
);

CREATE TABLE ItemAuthor (
	itemID SMALLINT UNSIGNED NOT NULL,
	authorID SMALLINT UNSIGNED NOT NULL,
	authorID2 SMALLINT UNSIGNED,
	PRIMARY KEY (itemID, authorID),
	CONSTRAINT fk_ItemAuthor_Item FOREIGN KEY (itemID) REFERENCES Item (itemID)
		ON DELETE RESTRICT
		ON UPDATE CASCADE,
	CONSTRAINT fk_ItemAuthor_Author FOREIGN KEY (authorID) REFERENCES Author (authorID)
		ON DELETE RESTRICT
		ON UPDATE CASCADE
);

CREATE TABLE checkoutTransaction (
	transactionID SMALLINT UNSIGNED NOT NULL AUTO_INCREMENT,
	patronID SMALLINT UNSIGNED NOT NULL,
	transactionDate DATETIME DEFAULT NOW() ON UPDATE NOW(),
	paymentAmount DECIMAL(13,2) DEFAULT 0.00,
	PRIMARY KEY (transactionID),
	CONSTRAINT fk_checkoutTransaction_Patron FOREIGN KEY (patronID) REFERENCES Patron (patronID)
		ON DELETE RESTRICT
		ON UPDATE CASCADE
);

CREATE TABLE checkoutTransactionItem (
	transactionID SMALLINT UNSIGNED NOT NULL,
	itemID SMALLINT UNSIGNED NOT NULL,
	dueDate DATETIME NOT NULL,
    returnDATE DATETIME NOT NULL,
    CONSTRAINT fk_checkoutTransactionItem_checkoutTransaction FOREIGN KEY (transactionID) REFERENCES checkoutTransaction (transactionID)
		ON DELETE RESTRICT
		ON UPDATE CASCADE,
	CONSTRAINT fk_checkoutTransactionItem_Item FOREIGN KEY (itemID) REFERENCES Item (itemID)
		ON DELETE RESTRICT
		ON UPDATE CASCADE
);
